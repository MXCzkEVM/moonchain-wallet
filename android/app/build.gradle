def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
// Load key.properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
// apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.moonchain.app"

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion "33.0.1"
    ndkVersion flutter.ndkVersion

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    flavorDimensions "distribute"
        
    productFlavors {
        product {}
        googlePlay {}
    }

     productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [CHANNEL: name]
    }

    defaultConfig {
        applicationId "com.moonchain.app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv('VERSION_CODE')?.hashCode()?.abs() ?: 404
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias = keystoreProperties['keyAlias']
            keyPassword = keystoreProperties['keyPassword']
            storeFile = keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword = keystoreProperties['storePassword']
        }
      
    }

     buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization
            minifyEnabled true
            // Enables resource shrinking
            shrinkResources true
            // Specify ProGuard rules files
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE' //<--- this defines what goes to those symbols
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
            }

        }
        debug {
            signingConfig signingConfigs.debug
            debuggable true
        }
    }

    compileOptions {
        // Use certain newer Java language APIs 
        // Even when your appâ€™s minSdkVersion is below the API level where these classes are actually available natively.
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
}
